// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package userhandlers

import (
	"github.com/F0rzend/simple-go-webserver/app/aggregate/bitcoin/entity"
	"github.com/F0rzend/simple-go-webserver/app/aggregate/user/entity"
	"sync"
)

// Ensure, that MockUserService does implement UserService.
// If this is not the case, regenerate this file with moq.
var _ UserService = &MockUserService{}

// MockUserService is a mock implementation of UserService.
//
// 	func TestSomethingThatUsesUserService(t *testing.T) {
//
// 		// make and configure a mocked UserService
// 		mockedUserService := &MockUserService{
// 			ChangeBitcoinBalanceFunc: func(userID uint64, action string, amount float64) error {
// 				panic("mock out the ChangeBitcoinBalance method")
// 			},
// 			ChangeUserBalanceFunc: func(userID uint64, action string, amount float64) error {
// 				panic("mock out the ChangeUserBalance method")
// 			},
// 			CreateUserFunc: func(name string, username string, email string) (uint64, error) {
// 				panic("mock out the CreateUser method")
// 			},
// 			GetUserFunc: func(v uint64) (*userentity.User, error) {
// 				panic("mock out the GetUser method")
// 			},
// 			GetUserBalanceFunc: func(userID uint64) (bitcoinentity.USD, error) {
// 				panic("mock out the GetUserBalance method")
// 			},
// 			UpdateUserFunc: func(userID uint64, name *string, email *string) error {
// 				panic("mock out the UpdateUser method")
// 			},
// 		}
//
// 		// use mockedUserService in code that requires UserService
// 		// and then make assertions.
//
// 	}
type MockUserService struct {
	// ChangeBitcoinBalanceFunc mocks the ChangeBitcoinBalance method.
	ChangeBitcoinBalanceFunc func(userID uint64, action string, amount float64) error

	// ChangeUserBalanceFunc mocks the ChangeUserBalance method.
	ChangeUserBalanceFunc func(userID uint64, action string, amount float64) error

	// CreateUserFunc mocks the CreateUser method.
	CreateUserFunc func(name string, username string, email string) (uint64, error)

	// GetUserFunc mocks the GetUser method.
	GetUserFunc func(v uint64) (*userentity.User, error)

	// GetUserBalanceFunc mocks the GetUserBalance method.
	GetUserBalanceFunc func(userID uint64) (bitcoinentity.USD, error)

	// UpdateUserFunc mocks the UpdateUser method.
	UpdateUserFunc func(userID uint64, name *string, email *string) error

	// calls tracks calls to the methods.
	calls struct {
		// ChangeBitcoinBalance holds details about calls to the ChangeBitcoinBalance method.
		ChangeBitcoinBalance []struct {
			// UserID is the userID argument value.
			UserID uint64
			// Action is the action argument value.
			Action string
			// Amount is the amount argument value.
			Amount float64
		}
		// ChangeUserBalance holds details about calls to the ChangeUserBalance method.
		ChangeUserBalance []struct {
			// UserID is the userID argument value.
			UserID uint64
			// Action is the action argument value.
			Action string
			// Amount is the amount argument value.
			Amount float64
		}
		// CreateUser holds details about calls to the CreateUser method.
		CreateUser []struct {
			// Name is the name argument value.
			Name string
			// Username is the username argument value.
			Username string
			// Email is the email argument value.
			Email string
		}
		// GetUser holds details about calls to the GetUser method.
		GetUser []struct {
			// V is the v argument value.
			V uint64
		}
		// GetUserBalance holds details about calls to the GetUserBalance method.
		GetUserBalance []struct {
			// UserID is the userID argument value.
			UserID uint64
		}
		// UpdateUser holds details about calls to the UpdateUser method.
		UpdateUser []struct {
			// UserID is the userID argument value.
			UserID uint64
			// Name is the name argument value.
			Name *string
			// Email is the email argument value.
			Email *string
		}
	}
	lockChangeBitcoinBalance sync.RWMutex
	lockChangeUserBalance    sync.RWMutex
	lockCreateUser           sync.RWMutex
	lockGetUser              sync.RWMutex
	lockGetUserBalance       sync.RWMutex
	lockUpdateUser           sync.RWMutex
}

// ChangeBitcoinBalance calls ChangeBitcoinBalanceFunc.
func (mock *MockUserService) ChangeBitcoinBalance(userID uint64, action string, amount float64) error {
	if mock.ChangeBitcoinBalanceFunc == nil {
		panic("MockUserService.ChangeBitcoinBalanceFunc: method is nil but UserService.ChangeBitcoinBalance was just called")
	}
	callInfo := struct {
		UserID uint64
		Action string
		Amount float64
	}{
		UserID: userID,
		Action: action,
		Amount: amount,
	}
	mock.lockChangeBitcoinBalance.Lock()
	mock.calls.ChangeBitcoinBalance = append(mock.calls.ChangeBitcoinBalance, callInfo)
	mock.lockChangeBitcoinBalance.Unlock()
	return mock.ChangeBitcoinBalanceFunc(userID, action, amount)
}

// ChangeBitcoinBalanceCalls gets all the calls that were made to ChangeBitcoinBalance.
// Check the length with:
//     len(mockedUserService.ChangeBitcoinBalanceCalls())
func (mock *MockUserService) ChangeBitcoinBalanceCalls() []struct {
	UserID uint64
	Action string
	Amount float64
} {
	var calls []struct {
		UserID uint64
		Action string
		Amount float64
	}
	mock.lockChangeBitcoinBalance.RLock()
	calls = mock.calls.ChangeBitcoinBalance
	mock.lockChangeBitcoinBalance.RUnlock()
	return calls
}

// ChangeUserBalance calls ChangeUserBalanceFunc.
func (mock *MockUserService) ChangeUserBalance(userID uint64, action string, amount float64) error {
	if mock.ChangeUserBalanceFunc == nil {
		panic("MockUserService.ChangeUserBalanceFunc: method is nil but UserService.ChangeUserBalance was just called")
	}
	callInfo := struct {
		UserID uint64
		Action string
		Amount float64
	}{
		UserID: userID,
		Action: action,
		Amount: amount,
	}
	mock.lockChangeUserBalance.Lock()
	mock.calls.ChangeUserBalance = append(mock.calls.ChangeUserBalance, callInfo)
	mock.lockChangeUserBalance.Unlock()
	return mock.ChangeUserBalanceFunc(userID, action, amount)
}

// ChangeUserBalanceCalls gets all the calls that were made to ChangeUserBalance.
// Check the length with:
//     len(mockedUserService.ChangeUserBalanceCalls())
func (mock *MockUserService) ChangeUserBalanceCalls() []struct {
	UserID uint64
	Action string
	Amount float64
} {
	var calls []struct {
		UserID uint64
		Action string
		Amount float64
	}
	mock.lockChangeUserBalance.RLock()
	calls = mock.calls.ChangeUserBalance
	mock.lockChangeUserBalance.RUnlock()
	return calls
}

// CreateUser calls CreateUserFunc.
func (mock *MockUserService) CreateUser(name string, username string, email string) (uint64, error) {
	if mock.CreateUserFunc == nil {
		panic("MockUserService.CreateUserFunc: method is nil but UserService.CreateUser was just called")
	}
	callInfo := struct {
		Name     string
		Username string
		Email    string
	}{
		Name:     name,
		Username: username,
		Email:    email,
	}
	mock.lockCreateUser.Lock()
	mock.calls.CreateUser = append(mock.calls.CreateUser, callInfo)
	mock.lockCreateUser.Unlock()
	return mock.CreateUserFunc(name, username, email)
}

// CreateUserCalls gets all the calls that were made to CreateUser.
// Check the length with:
//     len(mockedUserService.CreateUserCalls())
func (mock *MockUserService) CreateUserCalls() []struct {
	Name     string
	Username string
	Email    string
} {
	var calls []struct {
		Name     string
		Username string
		Email    string
	}
	mock.lockCreateUser.RLock()
	calls = mock.calls.CreateUser
	mock.lockCreateUser.RUnlock()
	return calls
}

// GetUser calls GetUserFunc.
func (mock *MockUserService) GetUser(v uint64) (*userentity.User, error) {
	if mock.GetUserFunc == nil {
		panic("MockUserService.GetUserFunc: method is nil but UserService.GetUser was just called")
	}
	callInfo := struct {
		V uint64
	}{
		V: v,
	}
	mock.lockGetUser.Lock()
	mock.calls.GetUser = append(mock.calls.GetUser, callInfo)
	mock.lockGetUser.Unlock()
	return mock.GetUserFunc(v)
}

// GetUserCalls gets all the calls that were made to GetUser.
// Check the length with:
//     len(mockedUserService.GetUserCalls())
func (mock *MockUserService) GetUserCalls() []struct {
	V uint64
} {
	var calls []struct {
		V uint64
	}
	mock.lockGetUser.RLock()
	calls = mock.calls.GetUser
	mock.lockGetUser.RUnlock()
	return calls
}

// GetUserBalance calls GetUserBalanceFunc.
func (mock *MockUserService) GetUserBalance(userID uint64) (bitcoinentity.USD, error) {
	if mock.GetUserBalanceFunc == nil {
		panic("MockUserService.GetUserBalanceFunc: method is nil but UserService.GetUserBalance was just called")
	}
	callInfo := struct {
		UserID uint64
	}{
		UserID: userID,
	}
	mock.lockGetUserBalance.Lock()
	mock.calls.GetUserBalance = append(mock.calls.GetUserBalance, callInfo)
	mock.lockGetUserBalance.Unlock()
	return mock.GetUserBalanceFunc(userID)
}

// GetUserBalanceCalls gets all the calls that were made to GetUserBalance.
// Check the length with:
//     len(mockedUserService.GetUserBalanceCalls())
func (mock *MockUserService) GetUserBalanceCalls() []struct {
	UserID uint64
} {
	var calls []struct {
		UserID uint64
	}
	mock.lockGetUserBalance.RLock()
	calls = mock.calls.GetUserBalance
	mock.lockGetUserBalance.RUnlock()
	return calls
}

// UpdateUser calls UpdateUserFunc.
func (mock *MockUserService) UpdateUser(userID uint64, name *string, email *string) error {
	if mock.UpdateUserFunc == nil {
		panic("MockUserService.UpdateUserFunc: method is nil but UserService.UpdateUser was just called")
	}
	callInfo := struct {
		UserID uint64
		Name   *string
		Email  *string
	}{
		UserID: userID,
		Name:   name,
		Email:  email,
	}
	mock.lockUpdateUser.Lock()
	mock.calls.UpdateUser = append(mock.calls.UpdateUser, callInfo)
	mock.lockUpdateUser.Unlock()
	return mock.UpdateUserFunc(userID, name, email)
}

// UpdateUserCalls gets all the calls that were made to UpdateUser.
// Check the length with:
//     len(mockedUserService.UpdateUserCalls())
func (mock *MockUserService) UpdateUserCalls() []struct {
	UserID uint64
	Name   *string
	Email  *string
} {
	var calls []struct {
		UserID uint64
		Name   *string
		Email  *string
	}
	mock.lockUpdateUser.RLock()
	calls = mock.calls.UpdateUser
	mock.lockUpdateUser.RUnlock()
	return calls
}
