// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package userservice

import (
	"github.com/F0rzend/simple-go-webserver/app/aggregate/bitcoin/entity"
	"sync"
)

// Ensure, that MockBTCPriceGetter does implement BTCPriceGetter.
// If this is not the case, regenerate this file with moq.
var _ BTCPriceGetter = &MockBTCPriceGetter{}

// MockBTCPriceGetter is a mock implementation of BTCPriceGetter.
//
// 	func TestSomethingThatUsesBTCPriceGetter(t *testing.T) {
//
// 		// make and configure a mocked BTCPriceGetter
// 		mockedBTCPriceGetter := &MockBTCPriceGetter{
// 			GetPriceFunc: func() bitcoinentity.BTCPrice {
// 				panic("mock out the GetPrice method")
// 			},
// 		}
//
// 		// use mockedBTCPriceGetter in code that requires BTCPriceGetter
// 		// and then make assertions.
//
// 	}
type MockBTCPriceGetter struct {
	// GetPriceFunc mocks the GetPrice method.
	GetPriceFunc func() bitcoinentity.BTCPrice

	// calls tracks calls to the methods.
	calls struct {
		// GetPrice holds details about calls to the GetPrice method.
		GetPrice []struct {
		}
	}
	lockGetPrice sync.RWMutex
}

// GetPrice calls GetPriceFunc.
func (mock *MockBTCPriceGetter) GetPrice() bitcoinentity.BTCPrice {
	if mock.GetPriceFunc == nil {
		panic("MockBTCPriceGetter.GetPriceFunc: method is nil but BTCPriceGetter.GetPrice was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetPrice.Lock()
	mock.calls.GetPrice = append(mock.calls.GetPrice, callInfo)
	mock.lockGetPrice.Unlock()
	return mock.GetPriceFunc()
}

// GetPriceCalls gets all the calls that were made to GetPrice.
// Check the length with:
//     len(mockedBTCPriceGetter.GetPriceCalls())
func (mock *MockBTCPriceGetter) GetPriceCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetPrice.RLock()
	calls = mock.calls.GetPrice
	mock.lockGetPrice.RUnlock()
	return calls
}
