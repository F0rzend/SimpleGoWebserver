// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package userservice

import (
	"github.com/F0rzend/simple-go-webserver/app/aggregate/user/entity"
	"sync"
)

// Ensure, that MockUserRepository does implement UserRepository.
// If this is not the case, regenerate this file with moq.
var _ UserRepository = &MockUserRepository{}

// MockUserRepository is a mock implementation of UserRepository.
//
// 	func TestSomethingThatUsesUserRepository(t *testing.T) {
//
// 		// make and configure a mocked UserRepository
// 		mockedUserRepository := &MockUserRepository{
// 			DeleteFunc: func(id uint64) error {
// 				panic("mock out the Delete method")
// 			},
// 			GetFunc: func(id uint64) (*userentity.User, error) {
// 				panic("mock out the Get method")
// 			},
// 			SaveFunc: func(user *userentity.User) error {
// 				panic("mock out the Save method")
// 			},
// 		}
//
// 		// use mockedUserRepository in code that requires UserRepository
// 		// and then make assertions.
//
// 	}
type MockUserRepository struct {
	// DeleteFunc mocks the Delete method.
	DeleteFunc func(id uint64) error

	// GetFunc mocks the Get method.
	GetFunc func(id uint64) (*userentity.User, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(user *userentity.User) error

	// calls tracks calls to the methods.
	calls struct {
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// ID is the id argument value.
			ID uint64
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// ID is the id argument value.
			ID uint64
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// User is the user argument value.
			User *userentity.User
		}
	}
	lockDelete sync.RWMutex
	lockGet    sync.RWMutex
	lockSave   sync.RWMutex
}

// Delete calls DeleteFunc.
func (mock *MockUserRepository) Delete(id uint64) error {
	if mock.DeleteFunc == nil {
		panic("MockUserRepository.DeleteFunc: method is nil but UserRepository.Delete was just called")
	}
	callInfo := struct {
		ID uint64
	}{
		ID: id,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(id)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedUserRepository.DeleteCalls())
func (mock *MockUserRepository) DeleteCalls() []struct {
	ID uint64
} {
	var calls []struct {
		ID uint64
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *MockUserRepository) Get(id uint64) (*userentity.User, error) {
	if mock.GetFunc == nil {
		panic("MockUserRepository.GetFunc: method is nil but UserRepository.Get was just called")
	}
	callInfo := struct {
		ID uint64
	}{
		ID: id,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(id)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedUserRepository.GetCalls())
func (mock *MockUserRepository) GetCalls() []struct {
	ID uint64
} {
	var calls []struct {
		ID uint64
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *MockUserRepository) Save(user *userentity.User) error {
	if mock.SaveFunc == nil {
		panic("MockUserRepository.SaveFunc: method is nil but UserRepository.Save was just called")
	}
	callInfo := struct {
		User *userentity.User
	}{
		User: user,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(user)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//     len(mockedUserRepository.SaveCalls())
func (mock *MockUserRepository) SaveCalls() []struct {
	User *userentity.User
} {
	var calls []struct {
		User *userentity.User
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}
